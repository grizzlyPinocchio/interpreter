(load "lookup_table.scm")

(define (make-environment name enclosing-env)
    (let ((bindings 
            (make-lookup-table (string-append name " bindings"))))
         
         (define (make-definition var def)
            (bindings 'insert! var def))

         (define (assign! var def)
            (let ((local-lookup (bindings 'lookup var)))
                 (cond ((and (equal? local-lookup 'lookup-failed)
                             (null? enclosing-env))
                        (begin (newline)
                               (display "Assignment lookup failure ")
                               (display "for variable '")
                               (display var)
                               (display "' in lowest environment '")
                               (display name)
                               (display "'")
                               'lookup-error))
                       ((equal? local-lookup 'lookup-failed)
                        (enclosing-env 'assign! var def))
                       (else (begin
                               (bindings 'delete! var)
                               (bindings 'insert! var def)
                               'assignment-done)))))

         (define (lookup var) 
            (let ((local-lookup (bindings 'lookup var)))
                 (cond ((and (equal? local-lookup 'lookup-failed)
                             (null? enclosing-env))
                        (begin (newline)
                               (display "Lookup failure for variable '")
                               (display var)
                               (display "' in lowest environment '")
                               (display name)
                               (display "'")
                               'lookup-error))
                       ((equal? local-lookup 'lookup-failed)
                        (enclosing-env 'lookup var))
                       (else local-lookup))))

         (define (dispatch msg . args)
            (cond ((equal? msg 'define) 
                   (apply make-definition args))
                  ((equal? msg 'assign!)
                   (apply assign! args))
                  ((equal? msg 'lookup) (apply lookup args))
                  ((equal? msg 'enclosing-env) enclosing-env)
                  ((equal? msg 'name) name)
                  ((equal? msg 'display) (bindings 'display))
                  (else (begin
                            (newline)
                            (display "Unknown message '")
                            (display msg)
                            (display "' dispatched to environment '")
                            (display name)
                            (display "'")
                            'error))))
         dispatch))
